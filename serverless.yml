service:
  name: command-line

provider:
  name: aws
  runtime: nodejs8.10
  stackName: ${self:service}-${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: serverless-terminator # The default profile to use with this service
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [ApplicationDynamoDBTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ApplicationDynamoDBTable, Arn]
              - '*'
  environment:
    TABLE_NAME:
      Ref: ApplicationDynamoDBTable

  # optional
  websocketApiName: ${self:service}-${self:provider.stage}

  # required for websocket apis
  # this selects from your payload what your "routeKey" parameter is
  # from the websocket event types on your function
  websocketApiRouteSelectionExpression: $request.body.action


plugins:
  - serverless-alexa-skills
  - serverless-dotenv-plugin

functions:
  # manage connection and disconnection of clients
  onConnect:
    handler: src/onConnect.handler
    events:
      - websocket: $connect

  onDisconnect:
    handler: src/onDisconnect.handler
    events:
      - websocket: $disconnect

  onPair:
    handler: src/onPair.handler
    events:
      - websocket: pair
  # hsendMessage - echo function for testing
# {"action": "sendMessage", "data": "test"}
  sendMessage:
    handler: src/sendMessage.handler
    events:
      - websocket: sendMessage

  # TODO:
  # just in case we are getting weird / bad data
  # we can react to it with a sane response
  #defaultMessages:
  #  handler: src/handler.defaultMessage
  #  events:
  #    - websocket:
  #        route: $default
  #        routeKey: $default

  skill:
    handler: src/skill.handler
    events:
      - alexaSkill:
          appId: amzn1.ask.skill.d02583d1-3da3-4c52-b1c8-2bea58674ef2
          enabled: true

custom:
  alexa:
    skills:
      - id: amzn1.ask.skill.d02583d1-3da3-4c52-b1c8-2bea58674ef2
        manifest:
          publishingInformation:
            locales:
              en-US:
                name: command-line
          apis:
            custom:
              endpoint:
                uri: arn:aws:lambda:us-east-1:220130740175:function:command-line-dev-skill
          manifestVersion: '1.0'
        models:
          en-US:
            interactionModel:
              languageModel:
                invocationName: command line
                intents:
                  - name: AMAZON.CancelIntent
                    samples: []
                  - name: AMAZON.HelpIntent
                    samples: []
                  - name: AMAZON.StopIntent
                    samples: []
                  - name: AMAZON.YesIntent
                    samples: []
                  - name: AMAZON.FallbackIntent
                    samples: []
                  - name: CommandsList
                    samples:
                    - list
                    - commands
                    - list commands
                    - list avaiable commands
                    - avaiable commands
                  - name: AddMachine
                    samples:
                    - add
                    - add machine
                    - pair
                    - pair machine
                    - assign
                    - assign machine
                    - connect
                    - connect machine
                  - name: MachinesList
                    samples:
                    - list machines
                    - machines
                    - list avaiable machines
                    - avaiable machines

resources:
  Resources:
    ApplicationDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${env:TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: RecordType
            AttributeType: S
        KeySchema:
          - AttributeName: RecordType
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        SSESpecification:
          SSEEnabled: true
